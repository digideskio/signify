diff --git b/bcrypt_pbkdf.c a/bcrypt_pbkdf.c
index cde347c..405ea48 100644
--- b/bcrypt_pbkdf.c
+++ a/bcrypt_pbkdf.c
@@ -15,6 +15,8 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
+#include "config.h"
+
 #include <sys/types.h>
 
 #include <stdint.h>
@@ -22,7 +24,16 @@
 #include <blf.h>
 #include <sha2.h>
 #include <string.h>
-#include <util.h>
+#if HAVE_BSD_STRING_H
+#include <bsd/string.h>
+#endif
+#if HAVE_LIBUTIL_H
+#include <libutil.h>
+#elif HAVE_BSD_LIBUTIL_H
+#include <bsd/libutil.h>
+#else
+#error portability error
+#endif
 
 #define	MINIMUM(a,b) (((a) < (b)) ? (a) : (b))
 
diff --git b/sha2.c a/sha2.c
index 4842e42..53b354a 100644
--- b/sha2.c
+++ a/sha2.c
@@ -300,7 +300,7 @@ SHA224Init(SHA2_CTX *context)
 
 __weak_alias(SHA224Transform, SHA256Transform);
 __weak_alias(SHA224Update, SHA256Update);
-__weak_alias(SHA224Pad, SHA256Pad);
+void SHA224Pad(SHA2_CTX *context) __attribute__ ((weak, alias ("SHA256Pad")));
 
 void
 SHA224Final(u_int8_t digest[SHA224_DIGEST_LENGTH], SHA2_CTX *context)
@@ -884,7 +884,7 @@ SHA384Init(SHA2_CTX *context)
 
 __weak_alias(SHA384Transform, SHA512Transform);
 __weak_alias(SHA384Update, SHA512Update);
-__weak_alias(SHA384Pad, SHA512Pad);
+void SHA384Pad(SHA2_CTX *context) __attribute__ ((weak, alias ("SHA512Pad")));
 
 void
 SHA384Final(u_int8_t digest[SHA384_DIGEST_LENGTH], SHA2_CTX *context)
diff --git b/signify.c a/signify.c
index 06d28da..ccb0d55 100644
--- b/signify.c
+++ a/signify.c
@@ -14,6 +14,9 @@
  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
+
+#include "config.h"
+
 #include <sys/stat.h>
 
 #include <netinet/in.h>
@@ -23,14 +26,29 @@
 #include <stdint.h>
 #include <fcntl.h>
 #include <string.h>
+#if HAVE_BSD_STRING_H
+#include <bsd/string.h>
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <stddef.h>
 #include <ohash.h>
 #include <err.h>
 #include <unistd.h>
+#if HAVE_READPASSPHRASE_H
 #include <readpassphrase.h>
-#include <util.h>
+#elif HAVE_BSD_READPASSPHRASE_H
+#include <bsd/readpassphrase.h>
+#else
+#error portability problem
+#endif
+#if HAVE_LIBUTIL_H
+#include <libutil.h>
+#elif HAVE_BSD_LIBUTIL_H
+#include <bsd/libutil.h>
+#else
+#error portability problem
+#endif
 #include <sha2.h>
 
 #include "crypto_api.h"
